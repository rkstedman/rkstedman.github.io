{"version":3,"sources":["EditDistanceTable.js","App.js","serviceWorker.js","index.js","editDistance.js"],"names":["EditDistanceTable","props","s","this","word1","t","word2","D","editDistanceTable","console","log","length","react_default","a","createElement","headers","key","i","push","rows","j","cells","className","React","Component","App","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","handleChangeWord1","bind","assertThisInitialized","handleChangeWord2","refreshEditDistanceTable","editDistance","setState","event","target","value","Fragment","type","placeholder","onChange","EditDistanceTable_EditDistanceTable","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","module","exports","Array","insertion","deletion","mismatch","Math","min"],"mappings":"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","file":"static/js/main.f5bc6dea.chunk.js","sourcesContent":["import React from 'react';\n\nexport default class EditDistanceTable extends React.Component {\n  render(props) {\n    let s = this.props.word1;// 'editing';\n    let t = this.props.word2; //'distance';\n    let D = this.props.editDistanceTable;\n    console.log(s, t, D);\n    if (D) {\n      console.log(t.length, s.length);\n      console.log(D.length, D[0].length);\n    }\n\n    if (!D || (D.length !== (t.length + 1) && D[0].length !== (s.length + 1))) {\n      return <div></div>;\n    }\n    // let D = [ [ 0, 1, 2, 3, 4, 5, 6, 7 ],\n    //           [ 1, 1, 1, 2, 3, 4, 5, 6 ],\n    //           [ 2, 2, 2, 1, 2, 3, 4, 5 ],\n    //           [ 3, 3, 3, 2, 2, 3, 4, 5 ],\n    //           [ 4, 4, 4, 3, 2, 3, 4, 5 ],\n    //           [ 5, 5, 5, 4, 3, 3, 4, 5 ],\n    //           [ 6, 6, 6, 5, 4, 4, 3, 4 ],\n    //           [ 7, 7, 7, 6, 5, 5, 4, 4 ],\n    //           [ 8, 7, 8, 7, 6, 6, 5, 5 ] ];\n\n    // Generate table headers with string letters\n    let headers = [<th key=\"0-0\"></th>, <th key=\"0-1\"></th>];\n    for(let i = 0; i < s.length; i++) {\n      headers.push(<th key={i + 2}>{s[i]}</th>)\n    }\n\n    let rows = [];\n    for(let j = 0; j <= t.length; j++) {\n      let cells = []\n      cells.push(<th key={0}>{t[j - 1]}</th>);\n      for(let i = 0; i <= s.length; i++) {\n        if(j === t.length && i === s.length) {\n          cells.push(<td key={i + 1} className=\"is-selected\">{D[j][i]}</td>)\n        } else {\n          cells.push(<td key={i + 1}>{D[j][i]}</td>)\n        }\n      }\n      rows.push(<tr key={j + 1}>{cells}</tr>)\n    }\n\n    return (\n      <table className=\"table is-bordered is-striped\">\n        <thead>\n          <tr>\n            {headers}\n          </tr>\n        </thead>\n        <tbody>\n          {rows}\n        </tbody>\n      </table>\n    );\n  }\n}\n","import React, { Component } from 'react';\nimport editDistance from './editDistance'\n// import logo from './logo.svg';\n// import './App.css';\n\nimport EditDistanceTable from './EditDistanceTable';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      word1: 'editing',\n      word2: 'distance'\n    };\n    this.handleChangeWord1 = this.handleChangeWord1.bind(this);\n    this.handleChangeWord2 = this.handleChangeWord2.bind(this);\n  }\n\n  componentDidMount() {\n    this.refreshEditDistanceTable();\n  }\n\n  refreshEditDistanceTable() {\n    let D = editDistance(this.state.word1, this.state.word2);\n    console.log(D);\n    this.setState({\n      editDistanceTable: D,\n      editDistance: D[D.length - 1][D[0].length - 1]\n    });\n  }\n\n  handleChangeWord1(event) {\n    this.setState({word1: event.target.value});\n    this.refreshEditDistanceTable();\n  }\n  handleChangeWord2(event) {\n    this.setState({word2: event.target.value});\n    this.refreshEditDistanceTable();\n  }\n\n  render() {\n    return (\n      <React.Fragment>\n        <section className=\"hero is-primary\">\n          <div className=\"hero-body\">\n            <h1 className=\"title\">\n              Calculating Levenshtein Distance\n            </h1>\n            <p className=\"subtitle\">\n              A way of measuring the similarity between two strings\n            </p>\n          </div>\n        </section>\n        <section className=\"section\">\n          <div className=\"columns\">\n            <div className=\"column is-one-third\">\n              <div className=\"content\">\n                Find the edit distance between\n                <div className=\"field\">\n                  <div className=\"control\">\n                    <input className=\"input is-primary\"\n                      type=\"text\"\n                      placeholder=\"First word\"\n                      value={this.state.word1}\n                      onChange={this.handleChangeWord1} />\n                    </div>\n                </div>\n                and\n                <div className=\"field\">\n                  <div className=\"control\">\n                    <input className=\"input is-primary\"\n                      type=\"text\"\n                      placeholder=\"Second word\"\n                      value={this.state.word2}\n                      onChange={this.handleChangeWord2} />.\n                    </div>\n                </div>\n              </div>\n            </div>\n            <div className=\"column is-one-third\">\n              <div className=\"content is-large\">\n                <p>\n                  Edit distance is <strong className=\"has-text-primary\">{this.state.editDistance}</strong>!\n                </p>\n              </div>\n              <EditDistanceTable\n                word1={this.state.word1}\n                word2={this.state.word2}\n                editDistanceTable={this.state.editDistanceTable}/>\n            </div>\n          </div>\n        </section>\n      </React.Fragment>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = function editDistance(s, t) {\n  let D = [[]]\n  for(let i = 0; i <= s.length; i++) {\n    D[0].push(i);\n  }\n  for(let j = 1; j <= t.length; j++) {\n    D.push(new Array(s.length));\n    D[j][0] = j;\n  }\n\n  for(let j = 1; j <= t.length; j++) {\n    for(let i = 1; i <= s.length; i++) {\n      let insertion = D[j - 1][i] + 1;\n      let deletion = D[j][i - 1] + 1;\n      let match = D[j - 1][i - 1];\n      let mismatch = D[j - 1][i - 1] + 1;\n      if (s[i - 1] === t[j - 1]) {\n        D[j][i] = Math.min(insertion, deletion, match);\n      } else {\n        D[j][i] = Math.min(insertion, deletion, mismatch);\n      }\n    }\n  }\n  return D\n}\n"],"sourceRoot":""}